#!/usr/bin/python3
import typing
import discord
from discord.ext import commands
from discord import ActionRow, Button, ButtonStyle
client = commands.Bot(command_prefix=commands.when_mentioned_or('$'), intents=discord.Intents.all(), case_insensitive=True)

# @client.command(name='buttons', description='sends you some nice Buttons')
# async def buttons(ctx: commands.Context):
    # a = Button(label='Option Nr.1', custom_id='option1',emoji="üëç", style=ButtonStyle.green); 
    # b = Button(label='Option Nr.2', custom_id='option2', style=ButtonStyle.green); 
    # c = Button(label='Option Nr.3', custom_id='option3', style=ButtonStyle.green); 

    # components = [ActionRow(a), ActionRow(b,c)]
    # an_embed = discord.Embed(title='Here are some Button\'s', description='Choose an option', color=discord.Color.random())
    # msg = await ctx.send(embed=an_embed, components=components)

    # def _check(i: discord.Interaction, b):
    #     return i.message == msg and i.member == ctx.author

    # interaction, button = await client.wait_for('button_click', check=_check)
    # button_id = button.custom_id


    # # This sends the Discord-API that the interaction has been received and is being "processed"
    # await interaction.defer()
    # await ctx.send(embed=discord.Embed(title=f"elboton fue {button_id}, {ctx.author}"))
    # # if this is not used and you also do not edit the message within 3 seconds as described below,
    # # Discord will indicate that the interaction has failed.

    # # If you use interaction.edit instead of interaction.message.edit, you do not have to defer the interaction,
    # # if your response does not last longer than 3 seconds.
    # await interaction.edit(embed=an_embed.add_field(name='Choose', value=f'Your Choose was `{button_id}`'), components=[components[0].disable_all_buttons()])

    # # The Discord API doesn't send an event when you press a link button so we can't "receive" that.



async def botimoku():
    await client.wait_until_ready()
    ctx = client.get_channel(910751775697563669) # replace with channel ID that you want to send to
    await send_trade(ctx, "BTCUSDT", "a.png", "52.0000", "56.000", "SHORT", 0, "512")




async def send_trade(ctx, symbol, image_path, takeprofit, stoploss, direccionalidad, status, trade_id):
    users = []
    c = discord.Color.from_rgb(229, 26, 76) if not status else discord.Color.from_rgb(127, 255, 0)   
    file = discord.File(fp=image_path, filename="image.png") 

    embed = discord.Embed(title=f"Ichimoku se cumplio en: {symbol}", description=f"üåàüåà **Deseas realizar un TRADE!!!!** üåàüåà :  {direccionalidad}\n**Stoploss**: {stoploss}\n**Takeprofit**: {takeprofit}", color=c)
    embed.set_image(url="attachment://image.png")



    ok_button = Button(label='Entrar al Trade!', custom_id=f'ok:{trade_id}', style=ButtonStyle.Primary); 
    not_ok_button = Button(label='Salir del Trade', custom_id=f'not_ok:{trade_id}', style=ButtonStyle.Danger);
    msg = await ctx.send(embed=embed, components=[ActionRow(ok_button, not_ok_button)], file=file)

    def _check(i: discord.Interaction, b):
        return i.message == msg 

    while(True):
        inter, but = await client.wait_for('button_click', check=_check)
        button = but.custom_id.split(":")
        trade_id = button[1]
        which_button = button[0]
        await inter.defer()
        if(inter.user_id in users and which_button == "ok"):
            continue
        if(which_button == "ok"):
            if(not len(users)):
                embed.description += "\nUsuarios: "
            users.append(inter.user_id)
            embed.description += f"<@{inter.user_id}>, "
            await inter.edit(embed=embed)
        elif(which_button == "not_ok"):
            await ctx.send(embed=discord.Embed(title=f":c"))

"""
entra al sv


discord
fijarse si existe botimoku_time
    si no lo crea, el canal
consigue el canal

logica trade
loop magico








"""

client.loop.create_task(botimoku())
client.run('OTEwNzUwODQ3NjE5NzA2OTEw.YZXY0w.IVbPVIhzs13habcOTFMjmsWfyG4')