#!/usr/bin/python3
import ta,requests,json,pandas
from ta.trend import IchimokuIndicator
from ta.utils import dropna
import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib.patches import Rectangle
import sqlite3
from sqlite3 import Error

#Auxiliar function definitions
def compareLast(serieA, serieB, margin=1, shift=0, shiftA=0, serieC=''):
    if (serieA.iloc[shiftA if shiftA else -1] > serieB.iloc[shift if shift else -1]) & ((serieA.iloc[shiftA if shiftA else -1] > serieC.iloc[shift if shift else -1]) if type(serieC) != str else True): return 1
    if (serieA.iloc[shiftA if shiftA else -1] < serieB.iloc[shift if shift else -1]) & ((serieA.iloc[shiftA if shiftA else -1] < serieC.iloc[shift if shift else -1]) if type(serieC)!=str else True) : return -1
    return 0

#Ichimoku Functions
def ichimokuCalculate(reqdf):
    reqdf = dropna(reqdf)

    ichimokudf = IchimokuIndicator(high=reqdf['high'] ,low=reqdf['low'])

    ichimokudf['ichimoku_a'] = ichimoku.ichimoku_a()
    ichimokudf['ichimoku_b'] = ichimoku.ichimoku_b()
    ichimokudf['ichimoku_conversion_line'] = ichimoku.ichimoku_conversion_line()
    ichimokudf['ichimoku_base_line'] = ichimoku.ichimoku_base_line()
    ichimokudf['ichimoku_lagging_span'] = reqdf['close']
    ichimokudf['close'] = reqdf['close']
    
    # return reqdf
    
    ichimokudf.to_csv('tmp/ichimoku.csv', encoding='utf-8')

def ichimokuAnalyze(ichimokudf):
    #Analyzing DataFrame

    #Declaration
	conditions = 0
	#Conversion and baseline
	conditions += compareLast(ichimokudf.ichimoku_conversion_line, ichimokudf.ichimoku_base_line)
	#Cloud
	conditions += compareLast(ichimokudf.ichimoku_a, ichimokudf.ichimoku_b)
	#Price
	conditions += compareLast(ichimokudf.close, ichimokudf.ichimoku_a, serieC=ichimokudf.ichimoku_b, shift=-26)
	#Lagging Span
	conditions += compareLast(ichimokudf.ichimoku_lagging_span, ichimokudf.ichimoku_a, serieC=ichimokudf.ichimoku_b, shift=-26*2)

	#Decalaration 2
	conditions2 = 0
	#Conversion and baseline 2
	conditions2 += compareLast(ichimokudf.ichimoku_conversion_line, ichimokudf.ichimoku_base_line, shiftA=-margin)
    #Cloud 2
	conditions2 += compareLast(ichimokudf.ichimoku_a, ichimokudf.ichimoku_b, shiftA=-margin)
	#Price 2
	conditions2 += compareLast(ichimokudf.close, ichimokudf.ichimoku_a, serieC=ichimokudf.ichimoku_b, shift=-26-margin, shiftA=-margin)
	#Lagging Span 2
	conditions2 += compareLast(ichimokudf.ichimoku_lagging_span, ichimokudf.ichimoku_a, serieC=ichimokudf.ichimoku_b, shift=-(26*2)-margin, shiftA=-margin)

    #Analyzing conditions
	if(abs(conditions)== 4 and conditions2 != conditions ):
		result = (True, conditions)
	result = (False, conditions)


    #Calculating stoploss and takeprofit
    
    sl = 0
    tp = 0
    direction = ''
    #Long    
    if(result[0] and result[1] == 4): 
        sl = ichimokudf.ichimoku_b.iloc[-26]
        tp = ichimokudf.close.iloc[-1] + ((ichimokudf.close.iloc[-1] - ichimokudf.ichimoku_b.iloc[-26]) * 2)
        direction = 'Long'
    #Short
    if(result[0] and result[1] == -4):
        sl = ichimokudf.ichimoku_a.iloc[-26]
        tp = ichimokudf.close.iloc[-1] - ((ichimokudf.ichimoku_a.iloc[-26] - ichimokudf.close.iloc[-1]) * 2)
        direction = 'Short'
        
    #Returns
    if(sl and tp):
        return (ichimokuichimokudf, { 'direction': direction, 'stoploss': sl, 'takeprofit': tp })
    elif:
        return (ichimokuichimokudf,None)
                         
def ichimokuPlot(ichimokudf, trade=None):
    mpl.style.use('seaborn')
    fig, ax = plt.subplots()
    
    if(trade != None):
         ax.add_patch(Rectangle((int(limit)-30, ichimokudf.close.iloc[-1]), 10,trade.takeprofit - ichimokudf.close.iloc[-1],
             facecolor = '#B8DEAB',
             fill=True,
             alpha=0.75,
             lw=5))

         ax.add_patch(Rectangle((int(limit)-30, trade.stoploss), 10,ichimokudf.close.iloc[-1] - trade.stoploss,
             facecolor = '#F5A5A5',
             alpha=0.75,
             fill=True,
             lw=5))
        ax.plot(df.ichimoku_a, label='Ichimoku A', color='#53B96A', linewidth=0)
            
    ax.plot(ichimokudf.ichimoku_a, label='Ichimoku A', color='#53B96A', linewidth=0)
    ax.fill_between(ichimokudf.ichimoku_a.index, ichimokudf.ichimoku_a, ichimokudf.ichimoku_b, where=ichimokudf.ichimoku_a >= ichimokudf.ichimoku_b, facecolor='#53B96A', alpha=0.5, interpolate=True)
    ax.fill_between(ichimokudf.ichimoku_b.index, ichimokudf.ichimoku_a, ichimokudf.ichimoku_b, where=ichimokudf.ichimoku_a <= ichimokudf.ichimoku_b, facecolor='#E9838D', alpha=0.5, interpolate=True)
    ax.plot(ichimokudf.ichimoku_base_line.shift(periods=-26), label='Base Line', color='#FFC107', linewidth=1)
    ax.plot(ichimokudf.ichimoku_conversion_line.shift(periods=-26), label='Conversion Line', color='#007BFF', linewidth=1)
    ax.plot(ichimokudf.close.shift(periods=-26*2), label='Lagging Span', color='#7F00FF', linewidth=1)

    plt.title(f'Ichimoku Cloud {symbols[coin]} {interval}')

    #Save and shows
    plt.legend()
    plt.savefig(f'Ichimoku-{symbols[coin]}.png')
    plt.show()
